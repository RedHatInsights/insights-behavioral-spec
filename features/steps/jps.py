# Copyright Â© 2021, 2022, 2023 Pavel Tisnovsky, Red Hat, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Test steps involving JVM-based applications."""

import subprocess

from behave import then, when


@when("I retrieve a list of all applications running under JVM")
def get_all_jvm_based_applications(context):
    """Use the jps tool to find all JVM-based applications."""
    # -l enables jps to display full package name which is required there
    out = subprocess.Popen(
        ["jps", "-l"],
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT,
    )

    # check if subprocess has been started and its output caught
    assert out is not None

    # interact with the process:
    # read data from stdout and stderr, until end-of-file is reached
    stdout, stderr = out.communicate()

    # basic checks if capture was ok
    assert stderr is None, "Error during check"
    assert stdout is not None, "No output from application"

    # check the return code of a process
    assert out.returncode == 0, f"Return code is {out.returncode}, but 0 is expected"

    # try to decode output
    output = stdout.decode("utf-8").split("\n")

    # should not happen in reality, but let's be on the safe place
    assert output is not None

    # update testing context
    context.output = output
    context.stdout = stdout
    context.stderr = stderr


@then("I should find the following application {application}")
def find_jvm_application(context, application):
    """Find the given JVM-based application from list generated by jps tool."""
    # preliminary checks
    assert context.output is not None
    assert isinstance(context.output, list), "wrong type of output"

    # flag if JVM-based application name has been found in jps output
    found = find_application_in_process_output(context.output, application)

    # test if given JVM-based application has been found
    assert found, f"JVM-based application {application} does not run"


def find_application_in_process_output(process_output, application):
    """Try to find if jps tool find the given application running."""
    # iterate over all lines generated by jps
    for line in process_output:
        if line.strip():  # skip empty lines
            ps, name = line.split(" ")
            if name == application:
                return True
    return False
